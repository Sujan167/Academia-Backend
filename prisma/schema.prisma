// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// -------------------------------------------------------------------

// College Management System
// User(id,name,email,password,phoneNumber,gender,role)
model User {
  id           String       @id @default(cuid())
  role         Role
  name         String
  email        String       @unique
  gender       String
  address      String
  username     String //sujanbasnet2077@student.ambition.edu.np
  password     String
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  phoneNumber  String       @unique
  dateOfBirth  DateTime
  refreshToken String?
  referenceKey String?
  isVerified   Boolean      @default(false)
  isSuspended  Boolean      @default(true)
  avatarURL    String?
  Student      Student?
  Staff        Staff?
  Attendence   Attendence[]
  Notice       Notice[]

  @@index([id, role, phoneNumber, email, name])
}

// -------------------------------------------------------------------

enum Role {
  STAFF
  ADMIN
  STUDENT
}

// -------------------------------------------------------------------

// Department(id, DepartmentName)
model Department {
  id             Int       @id @default(autoincrement())
  departmentName String
  subjects       Subject[]
  students       Student[]

  @@index([id, departmentName])
}

// -------------------------------------------------------------------

// Semester(id, semesterName)
model Semester {
  id           Int       @id @default(autoincrement())
  semesterName String
  Subject      Subject[]
  Student      Student[]

  @@index([id, semesterName])
}

// -------------------------------------------------------------------

//  Subject(id, subjectName,subjectCode,creditHour,semesterRefId,departmentRefId,isElective, staffRefId)
model Subject {
  id              Int              @id @default(autoincrement())
  subjectName     String
  subjectCode     String           @unique
  semester        Semester         @relation(fields: [semesterRefId], references: [id])
  semesterRefId   Int
  isElective      Boolean
  staff           Staff?           @relation(fields: [staffRefId], references: [staffId])
  staffRefId      String?
  departmentRefId Int
  department      Department       @relation(fields: [departmentRefId], references: [id])
  StudentSubject  StudentSubject[]
  creditHour      Int

  @@index([id, subjectName, semesterRefId, departmentRefId])
}

// -------------------------------------------------------------------

// model to maintain many-to-many relationship betweeen Student and Subject
model StudentSubject {
  id           Int     @id @default(autoincrement())
  studentRefId String
  subjectRefId Int
  subject      Subject @relation(fields: [subjectRefId], references: [id])
  student      Student @relation(fields: [studentRefId], references: [studentId])
  marks        Int?

  @@index([id, studentRefId, subjectRefId])
}

// -------------------------------------------------------------------

//  Student(id,semesterRefId,registratinoNumber,symbolNumber,subjectRefId,joinDate,departmentRefId)
model Student {
  studentId          String           @id @unique
  // user               User             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  user               User             @relation(fields: [studentId], references: [id])
  semester           Semester         @relation(fields: [semesterRefId], references: [id])
  semesterRefId      Int              @default(0)
  registrationNumber String?
  symbolNumber       String?
  joinDate           DateTime
  departmentRefId    Int
  department         Department       @relation(fields: [departmentRefId], references: [id])
  StudentSubject     StudentSubject[]

  @@index([studentId, semesterRefId, departmentRefId, symbolNumber, registrationNumber])
}

// -------------------------------------------------------------------

// Staff(id, subjectRefId,joinDate)
model Staff {
  staffId String    @id @unique
  // user    User      @relation(fields: [staffId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [staffId], references: [id])
  // joinDate DateTime
  Subject Subject[]

  @@index([staffId])
}

// -------------------------------------------------------------------
//  Attendence(id, userRefId, date, presentCount)
model Attendence {
  id           Int      @id @default(autoincrement())
  userRefId    String
  user         User     @relation(fields: [userRefId], references: [id], onDelete: Cascade)
  presentCount Int      @default(0)
  presentDate  DateTime

  @@index([id, userRefId])
}

model Notice {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String   @db.VarChar(1024)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  createdBy   String
  // userId      String
  user        User     @relation(fields: [createdBy], references: [id])

  @@index([id, title, createdBy, created_at])
}

model Otp {
  id         Int      @unique @default(autoincrement())
  email      String
  created_at DateTime @default(now())
  key        String   @unique

  @@index([email, key, created_at])
}
